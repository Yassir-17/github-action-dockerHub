# This is a basic workflow to help you get started with Actions

name: Containerize C Application and push it to Docker Hub 

# Controls when the workflow will run
on:
  # Triggers the workflow on push or pull request events but only for the "main" branch
  push:
    branches: [ "main" ]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "build"
  Containerize-C-Application:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest
    permissions:
      contents: write

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v3
     
      - name: Is gcc Installed? 
        run: gcc --version
        
      - name: Compile C-code to a binary
        run: gcc -o helloworld hello.c
        
      #step to run the test
      - name: Run Tests
        run: ./helloworld
        
      - name: List files 
        run: ls -a 
        
      - name: Build The docker image
        run: docker build -t hello:${{ github.run_number }} .
        
      - name: List Docker Images
        run: docker images 

      - name: Login To Docker Hub
        run:  docker login -u ${{ secrets.DOCKER_USERNAME }} -p ${{ secrets.DOCKER_PASSWORD }}

      - name: Install Trivy
        run: |
          sudo apt-get update
          sudo apt-get install -y wget
          wget https://github.com/aquasecurity/trivy/releases/download/v0.34.0/trivy_0.34.0_Linux-64bit.deb
          sudo dpkg -i trivy_0.34.0_Linux-64bit.deb
      
      - name: Scan Docker Image with Trivy
        #scan and check for high/critical vulnerabilities
        run: |
           #trivy image hello:${{ github.run_number }} 
           docker run --rm -v /var/run/docker.sock:/var/run/docker.sock aquasec/trivy:latest image --severity HIGH,CRITICAL --exit-code 1 hello:${{ github.run_number }}
           #--severity HIGH,CRITICAL --exit-code 1 ensures the workflow fails if high or critical vulnerabilities are found.
     
      - name: run a container using The Built image
        if: success()
        run: docker run hello:${{ github.run_number }}

        #fail the workflow if any "high" or "critical" vulnerabilities are found.
        #if: success() allows pushing the image to Docker Hub only 
        #if the Trivy scan passes without high or critical vulnerabilities.
      - name: Push the Image to docker hub
        if: success()
        run: |
            docker tag hello:${{ github.run_number }} yassir17/c-hello:${{ github.run_number }}
            docker push yassir17/c-hello:${{ github.run_number }} 
            #Push the Docker image only if the Trivy scan passes

      - name: Update Deployment Image Tag
        if: success()
        run: |
          sed -i "s|image: yassir17/c-hello:.*|image: yassir17/c-hello:${{ github.run_number }}|" deploy/deployment.yaml
          cat deploy/deployment.yaml  # Print the updated file for verification

      - name: Commit Changes to Deployment YAML
        if: success()
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          git add deploy/deployment.yaml
          git commit -m "Update image tag to yassir17/c-hello:${{ github.run_number }}"
          git push origin main

      - name: echo docker username and passswd
        run : echo "${{ secrets.DOCKER_USERNAME }}  ${{ secrets.DOCKER_PASSWORD }}"

        
        
